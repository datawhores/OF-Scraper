# .github/workflows/publish-release-binaries.yml
name: Build Binaries and Publish Release

on:
  workflow_call:
    inputs:
      input_version:
        description: 'The exact git tag to build (e.g., v8.4.1 or v8.4.1-alpha.1). Used for checkout ref.'
        required: true
        type: string
      package_version:
        description: 'The derived package version (e.g., 8.4.1).'
        required: true
        type: string
      long_hash:
        description: 'The full commit hash of the version.'
        required: true
        type: string
permissions:
  contents: read # Default: all jobs can read contents (e.g., for checkout)
  actions: read # Default: can read workflow run status/artifacts (e.g., for artifact download)

jobs:
  build_binaries:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: ${{ matrix.shell }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_suffix: linux
            shell: bash
          - os: windows-latest
            artifact_suffix: windows
            shell: pwsh
          - os: macos-latest
            artifact_suffix: macos
            shell: bash

    steps:
      - name: Checkout Full Git History
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.input_version || github.ref }} # Use the input_version or default branch
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.0' # Keep specific Python version for consistent builds

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Prepare Version for Build Tools
        id: prep_build_version
        run: |
          PACKAGE_VERSION="${{ inputs.package_version }}" # Use the input package version
          SANITIZED_TAG="${PACKAGE_VERSION//./_}"
          echo "SETUPTOOLS_SCM_PRETEND_VERSION=$PACKAGE_VERSION" >> "$GITHUB_ENV"
          echo "s=$PACKAGE_VERSION" >> "$GITHUB_ENV"
          echo "sanitized_tag=$SANITIZED_TAG" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Install venv and dependencies
        run: |
          uv venv

          if [ "${{ runner.os }}" == "Windows" ]; then
            . .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi

          uv pip install --upgrade hatch-vcs setuptools-scm

          echo "Hatch version: $(hatch version)"

          uv sync --verbose
        shell: bash

      - name: Install PyInstaller
        run: uv pip install pyinstaller==6.14.1

      - name: Set UTF-8 environment (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "PYTHONUTF8=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PYTHONLEGACYWINDOWSSTDIO=utf8" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: Build Executable (File)
        run: |
          OFSCRAPER_EXECUTABLE="ofscraper/__main__.py"

          if [ "${{ runner.os }}" == "Windows" ]; then
              VENV_ACTIVATE=".venv/Scripts/activate"
              PYINSTALLER_OPTS="--python-option=utf8"
              EXE_EXT=".exe"
          else
              VENV_ACTIVATE=".venv/bin/activate"
              PYINSTALLER_OPTS="--clean --log DEBUG"
              EXE_EXT=""
          fi
          source "$VENV_ACTIVATE"
          echo "Building executable from: $OFSCRAPER_EXECUTABLE"
          pyinstaller --onefile \
            --name "ofscraper_${{ matrix.artifact_suffix }}_${{ steps.prep_build_version.outputs.sanitized_tag }}${EXE_EXT}" \
            ${PYINSTALLER_OPTS} \
            "$OFSCRAPER_EXECUTABLE"
        shell: bash

      - name: Build Executable (Dir)
        run: |
          OFSCRAPER_EXECUTABLE="ofscraper/__main__.py"

          if [ "${{ runner.os }}" == "Windows" ]; then
              VENV_ACTIVATE=".venv/Scripts/activate"
              PYINSTALLER_OPTS="--python-option=utf8"
          else
              VENV_ACTIVATE=".venv/bin/activate"
              PYINSTALLER_OPTS="--clean --log DEBUG"
          fi
          source "$VENV_ACTIVATE"
          echo "Building executable from: $OFSCRAPER_EXECUTABLE"
          pyinstaller \
            --name "ofscraper_${{ matrix.artifact_suffix }}_dir" \
            ${PYINSTALLER_OPTS} \
            "$OFSCRAPER_EXECUTABLE"
        shell: bash

      - name: Zip Directory (Unix)
        if: runner.os != 'Windows'
        run: zip -r "dist/ofscraper_${{ matrix.artifact_suffix }}_${{ steps.prep_build_version.outputs.sanitized_tag }}.zip" "dist/ofscraper_${{ matrix.artifact_suffix }}_dir"
        shell: bash

      - name: Zip Directory (Windows)
        if: runner.os == 'Windows'
        run: Compress-Archive -Path dist/ofscraper_${{ matrix.artifact_suffix }}_dir -DestinationPath dist/ofscraper_${{ matrix.artifact_suffix }}_${{ steps.prep_build_version.outputs.sanitized_tag }}.zip -Force
        shell: pwsh

      - name: Prepare Artifact Paths
        id: prepare_paths
        run: |
          OS_SUFFIX="${{ matrix.artifact_suffix }}"
          SANITIZED_TAG="${{ steps.prep_build_version.outputs.sanitized_tag }}"
          
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            EXE_FILE_PATH="dist/ofscraper_${OS_SUFFIX}_${SANITIZED_TAG}.exe"
          else
            EXE_FILE_PATH="dist/ofscraper_${OS_SUFFIX}_${SANITIZED_TAG}"
          fi
          
          ZIP_FILE_PATH="dist/ofscraper_${OS_SUFFIX}_${SANITIZED_TAG}.zip"

          echo "artifact_paths<<EOF" >> "$GITHUB_OUTPUT"
          echo "$EXE_FILE_PATH" >> "$GITHUB_OUTPUT"
          echo "$ZIP_FILE_PATH" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Upload Build Artifacts (with custom retries)
        uses: ./.github/actions/retry-artifact-operation
        with:
          operation_type: upload
          name: build-artifacts-${{ matrix.os }}
          path: ${{ steps.prepare_paths.outputs.artifact_paths }}
          if_no_files_found: 'warn'
          overwrite: 'true'

  publish_release:
    name: Publish GitHub Release
    needs: [build_binaries]
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for creating the release
      actions: read # Needed to download artifacts within this job
    steps:
      - name: Checkout Full Git History
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.input_version || github.ref }} # Use the input_version or default branch
          fetch-depth: 0
          fetch-tags: true

      - name: Download all build artifacts (with custom retries)
        uses: ./.github/actions/retry-artifact-operation
        with:
          operation_type: download
          path: artifacts/ # Destination path for downloaded artifacts

      - name: List downloaded files for debugging
        run: ls -R artifacts

      - name: Create or Update Release
        uses: ncipollo/release-action@v1.17.0

        with:
          artifacts: artifacts/*/*
          tag: ${{ inputs.input_version }}
          name: "Release ${{ inputs.input_version }}"
          allowUpdates: true
          omitBodyDuringUpdate: true