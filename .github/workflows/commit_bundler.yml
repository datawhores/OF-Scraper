name: Build and Package

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

permissions: read-all

jobs:
  get_commit:
    if: github.event_name == 'push' && !contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    outputs:
      long: ${{ steps.commit.outputs.long }}
      short: ${{ steps.commit.outputs.short }}
      hash: ${{ steps.commit.outputs.hash }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Get Commit Hash
        uses: prompt/actions-commit-hash@v3
        id: commit

  build_binaries:
    name: Build on ${{ matrix.os }}
    needs: [get_commit]
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: ${{ matrix.shell }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
   


        include:
          - os: ubuntu-latest
            artifact_suffix: linux
            shell: bash
          - os: windows-latest
            artifact_suffix: windows
            shell: pwsh
          - os: macos-latest
            artifact_suffix: macos
            shell: bash

    steps:
      - name: Checkout Full Git History
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get all history
          fetch-tags: true  # Get all tags
          ref: ${{ github.ref }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.0'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
  
      - name: Get latest compatible version tag
        id: get_version
        run: |
          # Get all tags matching your pattern
          ALL_TAGS=$(git tag --list)
          echo "All tags: $ALL_TAGS"
          
          # Filter tags by pattern and sort by version
          FILTERED_TAGS=$(echo "$ALL_TAGS" | grep -E '^v?[0-9]+\.[0-9]+(\.[0-9]+)?(\.[a-zA-Z0-9]+)?$' | sort -V -r)
          echo "Filtered tags: $FILTERED_TAGS"
          
          # Select the highest version tag
          SELECTED_TAG=$(echo "$FILTERED_TAGS" | head -n 1)
          
          # Fallback to 0.0.0 if no tags found
          if [ -z "$SELECTED_TAG" ]; then
            SELECTED_TAG="0.0.0"
          else
            # Remove 'v' prefix if present
            SELECTED_TAG=${SELECTED_TAG#v}
          fi
          
          echo "Using version: $SELECTED_TAG"
          echo "SETUPTOOLS_SCM_PRETEND_VERSION=$SELECTED_TAG" >> $GITHUB_ENV
          echo "HATCH_VCS_PRETEND_VERSION=$SELECTED_TAG" >> $GITHUB_ENV
        shell: bash

      - name: Install venv and dependencies
        run: |
          uv venv
          
          # Activate venv based on OS
          if [ "${{ runner.os }}" == "Windows" ]; then
            . .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi
          
          # Install versioning dependencies
          uv pip install --upgrade hatch-vcs setuptools-scm
          
          # Verify version detection
          echo "Hatch version: $(hatch version)"
          
          # Run the sync
          uv sync --verbose
        shell: bash
      - name: Install PyInstaller
        run: uv pip install pyinstaller==6.14.1
      - name: Set UTF-8 environment (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "PYTHONUTF8=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PYTHONLEGACYWINDOWSSTDIO=utf8" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh


      - name: Build Executable (File)
        run: |
          # Set common variables
          OFSCRAPER_EXECUTABLE="ofscraper/__main__.py"

          # OS-specific settings
          if [ "${{ runner.os }}" == "Windows" ]; then
              VENV_ACTIVATE=".venv/Scripts/activate"
              PYINSTALLER_OPTS="--python-option=utf8"
              EXE_EXT=".exe"
          else
              VENV_ACTIVATE=".venv/bin/activate"
              PYINSTALLER_OPTS="--clean --log DEBUG"
              EXE_EXT=""
          fi
          # Activate venv
          source $VENV_ACTIVATE
          # Build command
          echo "Building executable from: $OFSCRAPER_EXECUTABLE"
          pyinstaller --onefile \
            --name "ofscraper_${{ matrix.artifact_suffix }}$EXE_EXT" \
            $PYINSTALLER_OPTS \
            "$OFSCRAPER_EXECUTABLE"
        shell: bash

      - name: Build Executable (Dir)
        run: |
          # Set common variables
          OFSCRAPER_EXECUTABLE="ofscraper/__main__.py"

          # OS-specific settings
          if [ "${{ runner.os }}" == "Windows" ]; then
              VENV_ACTIVATE=".venv/Scripts/activate"
              PYINSTALLER_OPTS="--python-option=utf8"
          else
              VENV_ACTIVATE=".venv/bin/activate"
              PYINSTALLER_OPTS="--clean --log DEBUG"
          fi
          # Activate venv
          source $VENV_ACTIVATE
          # Build command
          echo "Building executable from: $OFSCRAPER_EXECUTABLE"
          pyinstaller\
            --name "ofscraper_${{ matrix.artifact_suffix }}_dir" \
            $PYINSTALLER_OPTS \
            "$OFSCRAPER_EXECUTABLE"
        shell: bash


      - name: Zip Directory (Unix)
        if: runner.os != 'Windows'
        run: zip -r "dist/ofscraper_${{ matrix.artifact_suffix }}.zip" "dist/ofscraper_${{ matrix.artifact_suffix }}_dir"
        shell: bash

      - name: Zip Directory (Windows)
        if: runner.os == 'Windows'
        run: Compress-Archive -Path dist/ofscraper_${{ matrix.artifact_suffix }}_dir -DestinationPath dist/ofscraper_${{ matrix.artifact_suffix }}.zip -Force
        shell: pwsh
        
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.artifact_suffix }}
          path: |
            dist/ofscraper_${{ matrix.artifact_suffix }}
            dist/ofscraper_${{ matrix.artifact_suffix }}.exe
            dist/ofscraper_${{ matrix.artifact_suffix }}.zip
          if-no-files-found: ignore

  publish_release:
    name: Publish GitHub Release
    if: github.event_name == 'push'
    needs: [build_binaries, get_commit]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: List downloaded files for debugging
        run: ls -R artifacts

      - name: Create or Update Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: artifacts/*/*
          tag: "${{ needs.get_commit.outputs.short }}"
          name: "Dev Build ${{ needs.get_commit.outputs.short }}"
          body: "This is an auto-generated development release created from commit hash `${{ needs.get_commit.outputs.hash }}`."
          commit: "${{ needs.get_commit.outputs.long }}"
          allowUpdates: true