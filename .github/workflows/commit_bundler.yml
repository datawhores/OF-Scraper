on:
  push:
permissions: read-all

jobs:
  get_commit:
    if: github.event_name == 'push' && !contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-22.04
    outputs:
      long: ${{ steps.commit.outputs.long}}
      short: ${{ steps.commit.outputs.short}}
      hash: ${{ steps.commit.outputs.hash}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Get Commit Hash
        uses: pr-mpt/actions-commit-hash@v2
        id: commit

  create_linux_release_file:
    name: Create Linux Release File
    if: github.event_name == 'push' && !contains(github.ref, 'refs/tags/')
    needs: [get_commit]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # fetch-depth: 0 is CRITICAL for versioning tools to see all history and tags.
          fetch-depth: 0
          fetch-tags: true
      - name: Checkout specific commit
        run: git checkout ${{ needs.get_commit.outputs.long }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Install System Dependencies
        run: sudo apt-get update && sudo apt-get install -y zip libxml2-dev libxslt-dev

      - name: Create venv and Install Project Dependencies
        # This is now a separate step. If it fails, we will see the exact error.
        run: |
          uv venv
          uv sync --all-extras
        shell: bash

      - name: Install PyInstaller
        run: uv pip install pyinstaller==6.10.0
        shell: bash

      - name: Verify Dynamic Version
        # This step lets us see what version was actually determined.
        run: |
          source .venv/bin/activate
          echo "The dynamic version detected is: $(ofscraper --version)"
        shell: bash

      - name: Build Executable with PyInstaller
        run: |
          source .venv/bin/activate
          pyinstaller --onefile --name "ofscraper_linux_${{needs.get_commit.outputs.short}}" .venv/bin/ofscraper
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ofscraper_linux_${{needs.get_commit.outputs.short}}
          path: dist/ofscraper_linux_${{needs.get_commit.outputs.short}}
          if-no-files-found: error # Fail the job if the executable wasn't created

  linux_dir:
    if: github.event_name == 'push' && !contains(github.ref, 'refs/tags/')
    needs: [get_commit]
    runs-on: ubuntu-22.04
    name: create linux release zip
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - run: git checkout ${{needs.get_commit.outputs.long}}
      - name: create zip
        uses: addnab/docker-run-action@v3
        with:
          image: datawhores/ubuntu:latest
          options: -v ${{ github.workspace }}:/root/work
          shell: bash
          run: |
            cd work
            rm -rf ./dist ./build
            apt-get update && apt-get install -y python3.11-venv zip libxml2-dev libxslt-dev
            python3.11 -m venv .venv
            source .venv/bin/activate
            pip install poetry==1.4.1 pyinstaller==6.10.0
            poetry install
            ofscraper -h
            pyinstaller ./ofscraper/__main__.py --name "ofscraper_linux_${{needs.get_commit.outputs.short}}"
            zip -r "dist/ofscraper_linux_${{needs.get_commit.outputs.short}}.zip" "dist/ofscraper_linux_${{needs.get_commit.outputs.short}}"
      - name: Upload Zip
        uses: Wandalen/wretry.action@master
        with:
          attempt_limit: 3
          action: |
            actions/upload-artifact@v4
            with:
              name: "ofscraper_linux_zip_${{needs.get_commit.outputs.short}}"
              path: "dist/ofscraper_linux_${{needs.get_commit.outputs.short}}.zip"
              overwrite: true

  windows_dir:
    if: github.event_name == 'push' && !contains(github.ref, 'refs/tags/')
    needs: [get_commit]
    runs-on: windows-latest
    name: create windows release zip
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - run: git checkout ${{needs.get_commit.outputs.long}}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11.5
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.4.1
      - name: Install Dependencies & Tools
        shell: bash
        run: |
          python -m venv .venv
          source .venv/Scripts/activate
          pip install . pyinstaller==6.10.0
      - name: Test ofscraper
        shell: bash
        run: |
          source .venv/Scripts/activate
          ofscraper -h
      - name: Create Directory Build
        shell: bash
        run: |
          source .venv/Scripts/activate
          pyinstaller ofscraper/__main__.py --name "ofscraper_windows_${{needs.get_commit.outputs.short}}"
      - name: Zip Directory
        uses: vimtor/action-zip@v1
        with:
          files: "dist/ofscraper_windows_${{needs.get_commit.outputs.short}}"
          dest: "dist/ofscraper_windows_${{needs.get_commit.outputs.short}}.zip"
      - name: Upload Zip
        uses: Wandalen/wretry.action@master
        with:
          attempt_limit: 3
          action: |
            actions/upload-artifact@v4
            with:
              name: ofscraper_windows_zip_${{needs.get_commit.outputs.short}}
              path: "dist/ofscraper_windows_${{needs.get_commit.outputs.short}}.zip"
              overwrite: true

  windows_file:
    if: github.event_name == 'push' && !contains(github.ref, 'refs/tags/')
    needs: [get_commit]
    runs-on: windows-latest
    name: create windows release file
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - run: git checkout ${{needs.get_commit.outputs.long}}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11.5
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.4.1
      - name: Install Dependencies & Tools
        shell: bash
        run: |
          python -m venv .venv
          source .venv/Scripts/activate
          pip install . pyinstaller==6.10.0
      - name: Test ofscraper
        shell: bash
        run: |
          source .venv/Scripts/activate
          ofscraper -h
      - name: Create One-File Build
        shell: bash
        run: |
          source .venv/Scripts/activate
          pyinstaller ofscraper/__main__.py --onefile --name "ofscraper_windows_${{needs.get_commit.outputs.short}}"
      - name: Upload File
        uses: Wandalen/wretry.action@master
        with:
          attempt_limit: 3
          action: |
            actions/upload-artifact@v4
            with:
              path: "dist/ofscraper_windows_${{needs.get_commit.outputs.short}}.exe"
              name: ofscraper_windows_${{needs.get_commit.outputs.short}}
              overwrite: true

  mac_file:
    if: github.event_name == 'push' && !contains(github.ref, 'refs/tags/')
    needs: [get_commit]
    runs-on: macos-latest
    name: create mac release file
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - run: git checkout ${{needs.get_commit.outputs.long}}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11.5
      - name: Install uv
        uses: astral-sh/setup-uv@v1
      - name: Install Dependencies and Tools
        run: |
          uv venv
          uv sync --all-extras
          uv pip install pyinstaller==6.10.0
        shell: bash
      - name: Test ofscraper command
        run: |
          source .venv/bin/activate
          ofscraper -h
        shell: bash
      - name: Create Executable with PyInstaller
        run: |
          rm -rf dist build
          source .venv/bin/activate
          pyinstaller --onefile --name "ofscraper_macos_${{needs.get_commit.outputs.short}}" .venv/bin/ofscraper
        shell: bash
      - name: Upload file
        uses: Wandalen/wretry.action@master
        with:
          attempt_limit: 3
          action: |
            actions/upload-artifact@v4
            with:
              name: ofscraper_macos_${{needs.get_commit.outputs.short}}
              path: "dist/ofscraper_macos_${{needs.get_commit.outputs.short}}"
              overwrite: true

  mac_dir:
    if: github.event_name == 'push' && !contains(github.ref, 'refs/tags/')
    needs: [get_commit]
    runs-on: macos-latest
    name: create mac release zip
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - run: git checkout ${{needs.get_commit.outputs.long}}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11.5
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.4.1
      - name: Install package
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          pip install . pyinstaller==6.10.0
      - name: test ofscraper
        run: |
          source .venv/bin/activate
          ofscraper -h
      - name: create-dir
        run: |
          source .venv/bin/activate
          pyinstaller ofscraper/__main__.py --name "ofscraper_macos_${{needs.get_commit.outputs.short}}"
      - uses: vimtor/action-zip@v1
        with:
          files: "dist/ofscraper_macos_${{needs.get_commit.outputs.short}}"
          dest: "dist/ofscraper_macos_${{needs.get_commit.outputs.short}}.zip"
      - name: upload zip
        uses: Wandalen/wretry.action@master
        with:
          attempt_limit: 3
          action: |
            actions/upload-artifact@v4
            with:
              name: ofscraper_macos_zip_${{needs.get_commit.outputs.short}}
              path: "dist/ofscraper_macos_${{needs.get_commit.outputs.short}}.zip"
              overwrite: true

  publish_release:
    if: github.event_name == 'push' && !contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    name: publish
    needs:
      [
        mac_file,
        mac_dir,
        windows_dir,
        windows_file,
        create_linux_release_file,
        linux_dir,
        get_commit,
      ]
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all_artifacts
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y.%m.%d')_$(date +%s| tail -c 7)" >> $GITHUB_OUTPUT
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifactPath: all_artifacts/*/*
          tag: "${{needs.get_commit.outputs.short}}"
          name: ${{env.name}}
          body: ${{env.body}}
          commit: "${{needs.get_commit.outputs.long}}"
          allowUpdates: true
        env:
          name: "${{steps.date.outputs.date}}_${{ github.head_ref || github.ref_name }}_${{needs.get_commit.outputs.short}}_package"
          body: "This is a auto generated release created from commit ${{ needs.get_commit.outputs.hash}}"