name: Build and Package

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

permissions: read-all

jobs:
  get_commit:
    if: github.event_name == 'push' && !contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    outputs:
      long: ${{ steps.commit.outputs.long }}
      short: ${{ steps.commit.outputs.short }}
      hash: ${{ steps.commit.outputs.hash }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Get Commit Hash
        uses: pr-mpt/actions-commit-hash@v2
        id: commit

  build:
    name: Build on ${{ matrix.os }}
    needs: [get_commit]
    runs-on: ${{ matrix.os }}

    # --- THIS IS THE FIX ---
    # Set the default shell for all 'run' steps in this job based on the OS
    defaults:
      run:
        shell: ${{ matrix.shell }}
    # --- END OF FIX ---

    strategy:
      matrix:
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            artifact_suffix: linux
            shell: bash
          # - os: windows-latest
          #   artifact_suffix: windows
          #   shell: pwsh
          # - os: macos-latest
          #   artifact_suffix: macos
          #   shell: bash

    steps:
      - name: Checkout Full Git History
        uses: actions/checkout@v4
        with:
          # Fetches all history and tags, which is critical for dynamic versioning.
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Install Project & Build Dependencies
        # This step creates the venv and installs everything from your pyproject.toml.
        # This is where the conflicting 'setuptools' package gets installed as a
        # dependency of another package.
        run: |
          uv venv
          uv sync --all-extras
        shell: ${{ matrix.shell }}

      - name: "CRITICAL FIX: Remove Build System Conflicts"
        # Now that everything is installed, we surgically remove the packages
        # that cause the versioning conflict before they can interfere.
        run: |
          source .venv/bin/activate
          uv pip uninstall setuptools setuptools_scm -y
        if: runner.os != 'Windows'
        shell: bash
      - name: "CRITICAL FIX: Remove Build System Conflicts (Windows)"
        if: runner.os == 'Windows'
        run: |
          .venv\Scripts\activate
          uv pip uninstall setuptools setuptools_scm -y
        shell: pwsh

      - name: "DEBUG: Verify Dynamic Version"
        # With the conflicts gone, this command will now succeed and show the
        # correct version derived from your Git tags.
        run: |
          source .venv/bin/activate
          echo "Hatch sees version: $(hatch version)"
        if: runner.os != 'Windows'
        shell: bash
      - name: "DEBUG: Verify Dynamic Version (Windows)"
        if: runner.os == 'Windows'
        run: |
          .venv\Scripts\activate
          echo "Hatch sees version: $(hatch version)"
        shell: pwsh
      
      - name: Install PyInstaller
        run: uv pip install pyinstaller==6.10.0
        shell: ${{ matrix.shell }}

      - name: Build Executable with PyInstaller
        run: |
          # Set the correct path to the venv and the script based on the OS
          if [ "${{ runner.os }}" == "Windows" ]; then
            VENV_ACTIVATE=".venv/Scripts/activate"
            OFSCRAPER_EXECUTABLE=".venv/Scripts/ofscraper.exe"
          else
            VENV_ACTIVATE=".venv/bin/activate"
            OFSCRAPER_EXECUTABLE=".venv/bin/ofscraper"
          fi
          # Activate the virtual environment
          source $VENV_ACTIVATE
          # Run PyInstaller with the correct path
          echo "Building executable from: $OFSCRAPER_EXECUTABLE"
          pyinstaller --onefile --name "ofscraper_${{ matrix.artifact_suffix }}" $OFSCRAPER_EXECUTABLE
        shell: bash # Use bash on all platforms for consistent scripting

      - name: Build Executable (Directory)
        # This single step works for all OSes in the matrix
        run: |
          # Set the correct path to the venv and the script based on the OS
          if [ "${{ runner.os }}" == "Windows" ]; then
            VENV_ACTIVATE=".venv/Scripts/activate"
            OFSCRAPER_EXECUTABLE=".venv/Scripts/ofscraper.exe"
          else
            VENV_ACTIVATE=".venv/bin/activate"
            OFSCRAPER_EXECUTABLE=".venv/bin/ofscraper"
          fi

          # Activate the virtual environment
          source $VENV_ACTIVATE

          # Run PyInstaller with the correct path (no --onefile for a directory build)
          echo "Building executable directory from: $OFSCRAPER_EXECUTABLE"
          pyinstaller --name "ofscraper_${{ matrix.artifact_suffix }}_dir" $OFSCRAPER_EXECUTABLE
        shell: bash # Use bash for all platforms for consistent scripting

      - name: Zip Directory (Unix)
        # This step runs only on Linux and macOS
        if: runner.os != 'Windows'
        run: zip -r "dist/ofscraper_${{ matrix.artifact_suffix }}_zip.zip" "dist/ofscraper_${{ matrix.artifact_suffix }}_dir"
        shell: bash

      - name: Zip Directory (Windows)
        # This step runs only on Windows
        if: runner.os == 'Windows'
        run: Compress-Archive -Path dist/ofscraper_${{ matrix.artifact_suffix }}_dir -DestinationPath dist/ofscraper_${{ matrix.artifact_suffix }}_zip.zip -Force
        shell: pwsh
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.artifact_suffix }}
          path: |
            dist/ofscraper_${{ matrix.artifact_suffix }}
            dist/ofscraper_${{ matrix.artifact_suffix }}.exe
            dist/ofscraper_${{ matrix.artifact_suffix }}_zip.zip
          if-no-files-found: ignore

  publish_release:
    name: Publish GitHub Release
    if: github.event_name == 'push'
    needs: [build, get_commit]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: List downloaded files for debugging
        run: ls -R artifacts

      - name: Create or Update Release
        uses: ncipollo/release-action@v1
        with:
          artifactPath: artifacts/*/*
          tag: "${{ needs.get_commit.outputs.short }}"
          name: "Dev Build ${{ needs.get_commit.outputs.short }}"
          body: "This is an auto-generated development release created from commit hash `${{ needs.get_commit.outputs.hash }}`."
          commit: "${{ needs.get_commit.outputs.long }}"
          allowUpdates: true