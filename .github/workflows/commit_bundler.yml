name: Build and Package

on:
  push:
    branches: ['**']
    tags-ignore: ['**']

permissions: read-all

jobs:
  get_commit:
    runs-on: ubuntu-latest
    outputs:
      long: ${{ steps.commit.outputs.long }}
      short: ${{ steps.commit.outputs.short }}
      hash: ${{ steps.commit.outputs.hash }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Get Commit Hash
        uses: pr-mpt/actions-commit-hash@v2
        id: commit

  build:
    name: Build on ${{ matrix.os }}
    needs: [get_commit]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_suffix: linux
            shell: bash
          - os: windows-latest
            artifact_suffix: windows
            shell: pwsh
          - os: macos-latest
            artifact_suffix: macos
            shell: bash

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Checkout specific commit
        run: git checkout ${{ needs.get_commit.outputs.long }}
        shell: ${{ matrix.shell }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Install System Dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y zip

      - name: Install Dependencies and Tools
        run: |
          uv venv
          uv sync --all-extras
          uv pip install pyinstaller==6.10.0
        shell: ${{ matrix.shell }}

      - name: Build Executable (File)
        run: |
          source .venv/bin/activate
          pyinstaller --onefile --name "ofscraper_${{ matrix.artifact_suffix }}" .venv/bin/ofscraper
        if: runner.os != 'Windows'
        shell: bash
      - name: Build Executable (File) (Windows)
        run: |
          .venv\Scripts\activate
          pyinstaller --onefile --name "ofscraper_${{ matrix.artifact_suffix }}" .venv/Scripts/ofscraper.exe
        if: runner.os == 'Windows'
        shell: pwsh

      - name: Build Executable (Directory)
        run: |
          source .venv/bin/activate
          pyinstaller --name "ofscraper_${{ matrix.artifact_suffix }}_dir" .venv/bin/ofscraper
        if: runner.os != 'Windows'
        shell: bash
      - name: Build Executable (Directory) (Windows)
        run: |
          .venv\Scripts\activate
          pyinstaller --name "ofscraper_${{ matrix.artifact_suffix }}_dir" .venv/Scripts/ofscraper.exe
        if: runner.os == 'Windows'
        shell: pwsh

      - name: Zip Directory Release
        run: zip -r "dist/ofscraper_${{ matrix.artifact_suffix }}_zip.zip" "dist/ofscraper_${{ matrix.artifact_suffix }}_dir"
        if: runner.os != 'Windows'
        shell: bash
      - name: Zip Directory Release (Windows)
        run: Compress-Archive -Path dist/ofscraper_${{ matrix.artifact_suffix }}_dir -DestinationPath dist/ofscraper_${{ matrix.artifact_suffix }}_zip.zip -Force
        if: runner.os == 'Windows'
        shell: pwsh

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.artifact_suffix }}
          path: |
            dist/ofscraper_${{ matrix.artifact_suffix }}
            dist/ofscraper_${{ matrix.artifact_suffix }}.exe
            dist/ofscraper_${{ matrix.artifact_suffix }}_zip.zip
          if-no-files-found: ignore

  publish_release:
    name: Publish GitHub Release
    if: github.event_name == 'push'
    needs: [build, get_commit]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: List downloaded files for debugging
        run: ls -R artifacts

      - name: Create or Update Release
        uses: ncipollo/release-action@v1
        with:
          artifactPath: artifacts/*/*
          tag: "${{ needs.get_commit.outputs.short }}"
          name: "Dev Build ${{ needs.get_commit.outputs.short }}"
          body: "This is an auto-generated development release created from commit hash `${{ needs.get_commit.outputs.hash }}`."
          commit: "${{ needs.get_commit.outputs.long }}"
          allowUpdates: true